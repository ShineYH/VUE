body{
    margin: 0;
    background: #fafafa;
    font:14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
h2{
    margin: 0;
}
ul{
    padding: 0;
    margin:0;
    list-style: none;
}
a{
    text-decoration: none;
}
.page-top{
    width: 100%;
    height: 40px;
    background:#db4c3f ;
}
.page-content{
    width: 50%;
    height: 100%;
    margin: 0 auto;
}
.page-content h2{
    height: 100%;
    font-size: 18px;
    color: #fff;
    line-height: 40px;
}
.main{
    width: 50%;
    margin: 0 auto;
    box-sizing: border-box;    /*box-sizing: content-box|border-box|inherit;
            content-box:  宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。
            border-box:   为元素设定的宽度和高度决定了元素的边框盒。
                          就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。
            inherit:      规定应从父元素继承 box-sizing 属性的值。
    */
}
.task-input{
    width: 99%;
    height: 30px;
    outline: 0;        /*类似border的效果，如果border样式冲突，可用这个替代*/
}
.task-count{
    display: flex;
    margin: 10px 0;
}
.task-count li{
    flex: 1;                      /*flex 具体用法查看阮一峰博客： http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool   */
    padding-left:10px;
    color: #dd4b39;
}
.task-count li:nth-child(1){
    padding: 5px 0 0 10px;
}
.action{
    text-align: center;
    display: flex;
}
.action a{
    flex: 1;
    margin: 0 10px;
    padding: 5px 0;
    color: #777;
}
.action a:nth-child(3){
    margin-right: 0;
}
.active{
    border: 1px solid rgba(175, 47, 47, 0.2);
}
.tasks{
    background: #fff;
}
.no-task-tip{
    padding: 10px 0 10px 10px;
    display: block;
    border-bottom: 1px solid #ededed;
    color: #777;
}
.todo-list{
    margin: 0;
    padding: 0;
    list-style: none;
}
.todo-list li {
    position: relative;
    font-size: 16px;
    border-bottom: 1px solid #ededed;
}
.todo-list li:hover {
    background-color: #fafafa;
}
.toggle {
    text-align: center;
    width: 40px;
    height: auto;
    position: absolute;
    top: 5px;
    bottom: 0;
    margin: auto 0;
    border: none;
    -webkit-appearance: none;
    appearance: none;
}
.toggle:after {
    content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="40" fill="none" stroke="#ededed" stroke-width="3"/></svg>');
}

.toggle:checked:after {
    content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="40" fill="none" stroke="#bddad5" stroke-width="3"/><path fill="#5dc2af" d="M72 25L42 71 27 56l-4 4 20 20 34-52z"/></svg>');
}
.todo-list li label {
    white-space: pre-line;
    word-break: break-all;
    padding: 15px 60px 15px 15px;
    margin-left: 45px;
    display: block;
    line-height: 1.2;
    transition: color 0.4s;
}
.todo-list li.completed label {
    color: #d9d9d9;
    text-decoration: line-through;
}
.todo-list li .destroy {
    display: none;
    position: absolute;
    top: 0;
    right: 10px;
    bottom: 0;
    width: 40px;
    height: 40px;
    margin: auto 0;
    font-size: 30px;
    color: #cc9a9a;
    transition: color 0.2s ease-out;
    border: 0;
    vertical-align: baseline;
    background: none;
}
.todo-list li .destroy:hover {
    color: #af5b5e;
}
.todo-list li .destroy:after {
    content: '×';
}
.todo-list li:hover .destroy {
    display: block;
}

.todo-list li .edit {
    display: none;
}

.todo-list li.editing:last-child {
    margin-bottom: -1px;
}